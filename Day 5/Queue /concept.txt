### Queue Data Structure
A **Queue** is a linear data structure that follows the **FIFO (First In, First Out)** principle. This means that the element inserted first will be the first to be removed.

#### Basic Operations in a Queue
1. **Enqueue** → Insert an element at the rear (end) of the queue.
2. **Dequeue** → Remove an element from the front of the queue.
3. **Front (Peek)** → Get the first element of the queue without removing it.
4. **Rear** → Get the last element of the queue.
5. **isEmpty** → Checks if the queue is empty.
6. **isFull** → Checks if the queue is full (in case of a fixed-size queue).

---

### Types of Queues
1. **Simple Queue (Linear Queue)**  
   - Follows FIFO (First In, First Out).  
   - Insertions happen at the **rear** and deletions at the **front**.  
   - Example: A queue of people standing in line.

2. **Circular Queue**  
   - The last position connects back to the first position to utilize the space efficiently.
   - Prevents wastage of space in a fixed-size queue.
   - Example: CPU Scheduling in operating systems.

3. **Double-ended Queue (Deque)**  
   - Insertion and deletion can happen from both ends (front and rear).
   - **Types of Deques**:
     - **Input-restricted deque** → Insertion only at one end, deletion at both ends.
     - **Output-restricted deque** → Deletion only at one end, insertion at both ends.

4. **Priority Queue**  
   - Each element has a priority.  
   - The element with the highest priority is dequeued first.  
   - Example: Task scheduling in operating systems.

---

### Queue Implementation
Queues can be implemented using:
- **Arrays** (Fixed size, inefficient memory usage)
- **Linked List** (Dynamic size, better memory efficiency)
- **Stacks** (Using two stacks to simulate a queue)

---

### Queue Implementation in Java
#### Using Queue Interface (LinkedList-based Queue)
```java
import java.util.LinkedList;
import java.util.Queue;

public class QueueExample {
    public static void main(String[] args) {
        Queue<Integer> queue = new LinkedList<>();
        
        // Enqueue
        queue.add(10);
        queue.add(20);
        queue.add(30);
        
        // Dequeue
        System.out.println(queue.poll()); // Output: 10
        
        // Front
        System.out.println(queue.peek()); // Output: 20
        
        // Check if empty
        System.out.println(queue.isEmpty()); // Output: false
    }
}
```

#### Using Array Implementation
```java
class Queue {
    private int front, rear, size;
    private int capacity;
    private int[] array;

    public Queue(int capacity) {
        this.capacity = capacity;
        front = size = 0;
        rear = capacity - 1;
        array = new int[this.capacity];
    }

    boolean isFull() {
        return size == capacity;
    }

    boolean isEmpty() {
        return size == 0;
    }

    void enqueue(int item) {
        if (isFull()) {
            System.out.println("Queue is full");
            return;
        }
        rear = (rear + 1) % capacity;
        array[rear] = item;
        size++;
    }

    int dequeue() {
        if (isEmpty()) {
            System.out.println("Queue is empty");
            return -1;
        }
        int item = array[front];
        front = (front + 1) % capacity;
        size--;
        return item;
    }

    int front() {
        return isEmpty() ? -1 : array[front];
    }

    int rear() {
        return isEmpty() ? -1 : array[rear];
    }
}

// Example usage
public class Main {
    public static void main(String[] args) {
        Queue queue = new Queue(5);
        queue.enqueue(10);
        queue.enqueue(20);
        queue.enqueue(30);
        System.out.println(queue.dequeue()); // Output: 10
        System.out.println(queue.front());   // Output: 20
        System.out.println(queue.rear());    // Output: 30
    }
}
```

---

### Complexity Analysis
| Operation  | Time Complexity (Array) | Time Complexity (Linked List) |
|------------|------------------|------------------|
| Enqueue    | O(1) (Amortized)  | O(1)             |
| Dequeue    | O(n) (Shifting)   | O(1)             |
| Front/Rear | O(1)              | O(1)             |

---

### Real-life Applications of Queue
1. **CPU scheduling** (Round Robin uses a Circular Queue)
2. **Printer Queue** (Jobs are processed in order)
3. **Call Center System** (First come, first served)
4. **Operating System I/O Buffers**
5. **Graph Algorithms (BFS - Breadth First Search)**